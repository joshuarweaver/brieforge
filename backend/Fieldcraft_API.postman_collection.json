{
	"info": {
		"_postman_id": "fieldcraft-api-v1",
		"name": "Fieldcraft API - Complete Collection",
		"description": "Complete API collection for Fieldcraft - Intelligence-driven campaign generation system\n\n**Features:**\n- User authentication with JWT\n- Multi-tenant workspaces\n- Campaign management\n- Signal collection from 7 platforms (Google, YouTube, Meta, LinkedIn, TikTok, Reddit, Pinterest)\n- AI-powered signal analysis with Claude/GPT\n\n**Setup:**\n1. Import this collection\n2. Create environment with variables: `base_url`, `email`, `password`\n3. Run \"Login\" request to get auth token\n4. Token is automatically saved and used in subsequent requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set(\"user_id\", response.id);",
									"    pm.collectionVariables.set(\"workspace_id\", response.workspace_id);",
									"    console.log(\"User registered successfully. ID:\", response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"workspace_name\": \"My Workspace\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "register"]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set(\"access_token\", response.access_token);",
									"    console.log(\"Login successful. Token saved.\");",
									"    ",
									"    // Test token is valid",
									"    pm.test(\"Access token is present\", function () {",
									"        pm.expect(response.access_token).to.be.a('string');",
									"        pm.expect(response.access_token.length).to.be.above(20);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{email}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "login"]
						}
					},
					"response": []
				},
				{
					"name": "Get Current User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/me",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "me"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Workspaces",
			"item": [
				{
					"name": "List Workspaces",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/workspaces",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "workspaces"]
						}
					},
					"response": []
				},
				{
					"name": "Get Workspace",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/workspaces/{{workspace_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "workspaces", "{{workspace_id}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Campaigns",
			"item": [
				{
					"name": "Create Campaign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set(\"campaign_id\", response.id);",
									"    console.log(\"Campaign created. ID:\", response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Marketing Automation Campaign\",\n    \"brief\": {\n        \"goal\": \"increase brand awareness\",\n        \"audiences\": [\"B2B marketers\", \"startup founders\", \"growth teams\"],\n        \"offer\": \"marketing automation\",\n        \"competitors\": [\"HubSpot\", \"Marketo\", \"Pardot\"],\n        \"channels\": [\"linkedin\", \"google\", \"youtube\"],\n        \"budget_band\": \"$10k-50k/month\",\n        \"voice_constraints\": \"professional yet approachable, data-driven\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/campaigns",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "campaigns"]
						}
					},
					"response": []
				},
				{
					"name": "List Campaigns",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/campaigns",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "campaigns"]
						}
					},
					"response": []
				},
				{
					"name": "Get Campaign",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/campaigns/{{campaign_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "campaigns", "{{campaign_id}}"]
						}
					},
					"response": []
				},
				{
					"name": "Update Campaign",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Campaign Name\",\n    \"status\": \"analyzing\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/campaigns/{{campaign_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "campaigns", "{{campaign_id}}"]
						}
					},
					"response": []
				},
				{
					"name": "Delete Campaign",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/campaigns/{{campaign_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "campaigns", "{{campaign_id}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Signals",
			"item": [
				{
					"name": "Collect Signals - All Cartridges",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"max_queries_per_cartridge\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/campaigns/{{campaign_id}}/signals/collect",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "campaigns", "{{campaign_id}}", "signals", "collect"]
						},
						"description": "Collect signals using all available cartridges"
					},
					"response": []
				},
				{
					"name": "Collect Signals - Specific Cartridges",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartridge_names\": [\"google_serp\", \"youtube\", \"meta_ads\"],\n    \"max_queries_per_cartridge\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/campaigns/{{campaign_id}}/signals/collect",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "campaigns", "{{campaign_id}}", "signals", "collect"]
						},
						"description": "Collect signals from specific cartridges only"
					},
					"response": []
				},
				{
					"name": "List Campaign Signals",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/campaigns/{{campaign_id}}/signals?limit=20",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "campaigns", "{{campaign_id}}", "signals"],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "min_relevance",
									"value": "0.5",
									"disabled": true
								},
								{
									"key": "source",
									"value": "google",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Signal",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/signals/1",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "signals", "1"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AI Analysis",
			"item": [
				{
					"name": "Analyze - Comprehensive (Claude)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set(\"analysis_id\", response.id);",
									"    console.log(\"Analysis ID:\", response.id);",
									"    ",
									"    pm.test(\"Analysis completed\", function () {",
									"        pm.expect(response.status).to.be.oneOf([\"completed\", \"pending\", \"in_progress\"]);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"analysis_type\": \"comprehensive\",\n    \"llm_provider\": \"claude\",\n    \"max_signals\": 50,\n    \"min_relevance\": 0.3,\n    \"async_mode\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/campaigns/{{campaign_id}}/analyze",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "campaigns", "{{campaign_id}}", "analyze"]
						},
						"description": "Run comprehensive AI analysis using Claude"
					},
					"response": []
				},
				{
					"name": "Analyze - Competitor Analysis",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"analysis_type\": \"competitor\",\n    \"llm_provider\": \"claude\",\n    \"max_signals\": 30,\n    \"async_mode\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/campaigns/{{campaign_id}}/analyze",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "campaigns", "{{campaign_id}}", "analyze"]
						},
						"description": "Analyze competitor strategies"
					},
					"response": []
				},
				{
					"name": "Analyze - Audience Insights",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"analysis_type\": \"audience\",\n    \"llm_provider\": \"claude\",\n    \"max_signals\": 40,\n    \"async_mode\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/campaigns/{{campaign_id}}/analyze",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "campaigns", "{{campaign_id}}", "analyze"]
						},
						"description": "Extract audience insights and pain points"
					},
					"response": []
				},
				{
					"name": "Analyze - Async Mode",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"analysis_type\": \"comprehensive\",\n    \"llm_provider\": \"claude\",\n    \"async_mode\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/campaigns/{{campaign_id}}/analyze",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "campaigns", "{{campaign_id}}", "analyze"]
						},
						"description": "Run analysis in background (returns immediately)"
					},
					"response": []
				},
				{
					"name": "List Campaign Analyses",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/campaigns/{{campaign_id}}/signal-analyses?limit=10",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "campaigns", "{{campaign_id}}", "signal-analyses"],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "analysis_type",
									"value": "comprehensive",
									"disabled": true
								},
								{
									"key": "status_filter",
									"value": "completed",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Analysis",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/signal-analyses/{{analysis_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "signal-analyses", "{{analysis_id}}"]
						}
					},
					"response": []
				},
				{
					"name": "Delete Analysis",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/signal-analyses/{{analysis_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "signal-analyses", "{{analysis_id}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "System",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": ["{{base_url}}"],
							"path": ["health"]
						}
					},
					"response": []
				},
				{
					"name": "API Root",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": ["{{base_url}}"],
							"path": [""]
						}
					},
					"response": []
				},
				{
					"name": "API Documentation",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/docs",
							"host": ["{{base_url}}"],
							"path": ["docs"]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-refresh token if needed (placeholder for future enhancement)",
					"console.log(\"Request to:\", pm.request.url.toString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test - check response time",
					"pm.test(\"Response time is less than 10s\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(10000);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "email",
			"value": "test@example.com",
			"type": "string"
		},
		{
			"key": "password",
			"value": "testpassword123",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string",
			"description": "Integer ID for user"
		},
		{
			"key": "workspace_id",
			"value": "",
			"type": "string",
			"description": "UUID for workspace (auto-saved from Register)"
		},
		{
			"key": "campaign_id",
			"value": "",
			"type": "string",
			"description": "UUID for campaign (auto-saved from Create Campaign)"
		},
		{
			"key": "analysis_id",
			"value": "",
			"type": "string",
			"description": "UUID for signal analysis (auto-saved from Analyze)"
		}
	]
}
